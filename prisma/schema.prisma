generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Species {
  CAT
  DOG
}

enum PendingStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PendingCategory {
  VACCINATION
  TREATMENT
  VET_CONTROL
  SURGERY
  HYGINE
  GENERAL_REVISION
  AESTHETICS
}

enum UserRole {
  CLIENT
  VETERINARIAN
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  role          UserRole       @default(CLIENT)
  phone         String         @unique
  pets          Pet[]          @relation("UserPets")
  pendings      Pending[]
  AuthToken     AuthToken[]
  consultations Consultation[]
  vaccines      Vaccine[]
  treatment     Treatment[]
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  phone     String
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([phone])
}

model Pet {
  id            Int            @id @default(autoincrement())
  name          String
  dateOfBirth   DateTime
  species       Species
  owners        User[]         @relation("UserPets")
  consultations Consultation[]
  pendings      Pending[]
  vaccines      Vaccine[]
  treatment     Treatment[]
}

model Pending {
  id             Int             @id @default(autoincrement())
  title          String
  description    String?
  location       String?
  status         PendingStatus
  category       PendingCategory
  date           DateTime?
  reminderConfig Json?
  user           User            @relation(fields: [userId], references: [id])
  pet            Pet             @relation(fields: [petId], references: [id])
  userId         Int
  petId          Int
  reminder       Reminder[]
}

model Reminder {
  id           Int      @id @default(autoincrement())
  pendingId    Int
  scheduledFor DateTime
  sent         Boolean  @default(false)
  pending      Pending  @relation(fields: [pendingId], references: [id], onDelete: Cascade)

  @@index([scheduledFor])
  @@index([sent])
}

enum ConsultationType {
  GENERAL_CONSULTATION
  VACCINATION
  TREATMENT
  CHECKUP
  EMERGENCY
  SURGERY
  AESTHETIC
  REVIEW
}

model Consultation {
  id               Int              @id @default(autoincrement())
  petId            Int
  userId           Int
  chiefComplaint   String
  consultationType ConsultationType
  date             DateTime
  findings         String?
  diagnosis        String?
  treatment        Treatment[]
  vaccines         Vaccine[]
  nextSteps        String?
  additionalNotes  String?
  nextConsultation DateTime?
  createdAt        DateTime         @default(now())
  pet              Pet              @relation(fields: [petId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@index([petId])
  @@index([userId])
  @@index([date])
}

model VaccineCatalog {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  periodicity  Int?
  minAge       Int?
  notes        String?
  applicableTo Species[]
  vaccines     Vaccine[]

  @@index([name])
}

model Vaccine {
  id              Int       @id @default(autoincrement())
  catalogId       Int
  applicationDate DateTime
  expirationDate  DateTime?
  batchNumber     String?
  notes           String?
  petId           Int
  consultationId  Int?
  authorId        Int

  catalog      VaccineCatalog @relation(fields: [catalogId], references: [id])
  author       User           @relation(fields: [authorId], references: [id])
  pet          Pet            @relation(fields: [petId], references: [id])
  consultation Consultation?  @relation(fields: [consultationId], references: [id])

  @@index([catalogId])
  @@index([authorId])
  @@index([petId])
  @@index([applicationDate])
}

model Treatment {
  id             Int       @id @default(autoincrement())
  name           String
  startDate      DateTime
  endDate        DateTime?
  notes          String?
  petId          Int
  consultationId Int?
  authorId       Int

  author       User          @relation(fields: [authorId], references: [id])
  pet          Pet           @relation(fields: [petId], references: [id])
  consultation Consultation? @relation(fields: [consultationId], references: [id])

  @@index([authorId])
  @@index([petId])
  @@index([startDate])
}
